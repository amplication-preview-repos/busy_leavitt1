/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnomalyTypeService } from "../anomalyType.service";
import { AnomalyTypeCreateInput } from "./AnomalyTypeCreateInput";
import { AnomalyType } from "./AnomalyType";
import { AnomalyTypeFindManyArgs } from "./AnomalyTypeFindManyArgs";
import { AnomalyTypeWhereUniqueInput } from "./AnomalyTypeWhereUniqueInput";
import { AnomalyTypeUpdateInput } from "./AnomalyTypeUpdateInput";

export class AnomalyTypeControllerBase {
  constructor(protected readonly service: AnomalyTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnomalyType })
  async createAnomalyType(
    @common.Body() data: AnomalyTypeCreateInput
  ): Promise<AnomalyType> {
    return await this.service.createAnomalyType({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnomalyType] })
  @ApiNestedQuery(AnomalyTypeFindManyArgs)
  async anomalyTypes(@common.Req() request: Request): Promise<AnomalyType[]> {
    const args = plainToClass(AnomalyTypeFindManyArgs, request.query);
    return this.service.anomalyTypes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnomalyType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async anomalyType(
    @common.Param() params: AnomalyTypeWhereUniqueInput
  ): Promise<AnomalyType | null> {
    const result = await this.service.anomalyType({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnomalyType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnomalyType(
    @common.Param() params: AnomalyTypeWhereUniqueInput,
    @common.Body() data: AnomalyTypeUpdateInput
  ): Promise<AnomalyType | null> {
    try {
      return await this.service.updateAnomalyType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnomalyType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnomalyType(
    @common.Param() params: AnomalyTypeWhereUniqueInput
  ): Promise<AnomalyType | null> {
    try {
      return await this.service.deleteAnomalyType({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
