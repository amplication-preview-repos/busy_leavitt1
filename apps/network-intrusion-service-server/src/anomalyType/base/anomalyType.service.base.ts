/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AnomalyType as PrismaAnomalyType } from "@prisma/client";

export class AnomalyTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnomalyTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.anomalyType.count(args);
  }

  async anomalyTypes(
    args: Prisma.AnomalyTypeFindManyArgs
  ): Promise<PrismaAnomalyType[]> {
    return this.prisma.anomalyType.findMany(args);
  }
  async anomalyType(
    args: Prisma.AnomalyTypeFindUniqueArgs
  ): Promise<PrismaAnomalyType | null> {
    return this.prisma.anomalyType.findUnique(args);
  }
  async createAnomalyType(
    args: Prisma.AnomalyTypeCreateArgs
  ): Promise<PrismaAnomalyType> {
    return this.prisma.anomalyType.create(args);
  }
  async updateAnomalyType(
    args: Prisma.AnomalyTypeUpdateArgs
  ): Promise<PrismaAnomalyType> {
    return this.prisma.anomalyType.update(args);
  }
  async deleteAnomalyType(
    args: Prisma.AnomalyTypeDeleteArgs
  ): Promise<PrismaAnomalyType> {
    return this.prisma.anomalyType.delete(args);
  }
}
