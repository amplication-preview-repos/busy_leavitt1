/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DetectionResult as PrismaDetectionResult,
} from "@prisma/client";

export class DetectionResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DetectionResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.detectionResult.count(args);
  }

  async detectionResults(
    args: Prisma.DetectionResultFindManyArgs
  ): Promise<PrismaDetectionResult[]> {
    return this.prisma.detectionResult.findMany(args);
  }
  async detectionResult(
    args: Prisma.DetectionResultFindUniqueArgs
  ): Promise<PrismaDetectionResult | null> {
    return this.prisma.detectionResult.findUnique(args);
  }
  async createDetectionResult(
    args: Prisma.DetectionResultCreateArgs
  ): Promise<PrismaDetectionResult> {
    return this.prisma.detectionResult.create(args);
  }
  async updateDetectionResult(
    args: Prisma.DetectionResultUpdateArgs
  ): Promise<PrismaDetectionResult> {
    return this.prisma.detectionResult.update(args);
  }
  async deleteDetectionResult(
    args: Prisma.DetectionResultDeleteArgs
  ): Promise<PrismaDetectionResult> {
    return this.prisma.detectionResult.delete(args);
  }
}
