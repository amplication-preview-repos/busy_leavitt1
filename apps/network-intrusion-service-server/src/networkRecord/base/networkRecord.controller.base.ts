/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NetworkRecordService } from "../networkRecord.service";
import { NetworkRecordCreateInput } from "./NetworkRecordCreateInput";
import { NetworkRecord } from "./NetworkRecord";
import { NetworkRecordFindManyArgs } from "./NetworkRecordFindManyArgs";
import { NetworkRecordWhereUniqueInput } from "./NetworkRecordWhereUniqueInput";
import { NetworkRecordUpdateInput } from "./NetworkRecordUpdateInput";

export class NetworkRecordControllerBase {
  constructor(protected readonly service: NetworkRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NetworkRecord })
  async createNetworkRecord(
    @common.Body() data: NetworkRecordCreateInput
  ): Promise<NetworkRecord> {
    return await this.service.createNetworkRecord({
      data: data,
      select: {
        createdAt: true,
        destinationBytes: true,
        duration: true,
        flag: true,
        id: true,
        protocolType: true,
        service: true,
        sourceBytes: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NetworkRecord] })
  @ApiNestedQuery(NetworkRecordFindManyArgs)
  async networkRecords(
    @common.Req() request: Request
  ): Promise<NetworkRecord[]> {
    const args = plainToClass(NetworkRecordFindManyArgs, request.query);
    return this.service.networkRecords({
      ...args,
      select: {
        createdAt: true,
        destinationBytes: true,
        duration: true,
        flag: true,
        id: true,
        protocolType: true,
        service: true,
        sourceBytes: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NetworkRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async networkRecord(
    @common.Param() params: NetworkRecordWhereUniqueInput
  ): Promise<NetworkRecord | null> {
    const result = await this.service.networkRecord({
      where: params,
      select: {
        createdAt: true,
        destinationBytes: true,
        duration: true,
        flag: true,
        id: true,
        protocolType: true,
        service: true,
        sourceBytes: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NetworkRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNetworkRecord(
    @common.Param() params: NetworkRecordWhereUniqueInput,
    @common.Body() data: NetworkRecordUpdateInput
  ): Promise<NetworkRecord | null> {
    try {
      return await this.service.updateNetworkRecord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          destinationBytes: true,
          duration: true,
          flag: true,
          id: true,
          protocolType: true,
          service: true,
          sourceBytes: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NetworkRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNetworkRecord(
    @common.Param() params: NetworkRecordWhereUniqueInput
  ): Promise<NetworkRecord | null> {
    try {
      return await this.service.deleteNetworkRecord({
        where: params,
        select: {
          createdAt: true,
          destinationBytes: true,
          duration: true,
          flag: true,
          id: true,
          protocolType: true,
          service: true,
          sourceBytes: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
