/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NetworkRecord as PrismaNetworkRecord } from "@prisma/client";

export class NetworkRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NetworkRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.networkRecord.count(args);
  }

  async networkRecords(
    args: Prisma.NetworkRecordFindManyArgs
  ): Promise<PrismaNetworkRecord[]> {
    return this.prisma.networkRecord.findMany(args);
  }
  async networkRecord(
    args: Prisma.NetworkRecordFindUniqueArgs
  ): Promise<PrismaNetworkRecord | null> {
    return this.prisma.networkRecord.findUnique(args);
  }
  async createNetworkRecord(
    args: Prisma.NetworkRecordCreateArgs
  ): Promise<PrismaNetworkRecord> {
    return this.prisma.networkRecord.create(args);
  }
  async updateNetworkRecord(
    args: Prisma.NetworkRecordUpdateArgs
  ): Promise<PrismaNetworkRecord> {
    return this.prisma.networkRecord.update(args);
  }
  async deleteNetworkRecord(
    args: Prisma.NetworkRecordDeleteArgs
  ): Promise<PrismaNetworkRecord> {
    return this.prisma.networkRecord.delete(args);
  }
}
